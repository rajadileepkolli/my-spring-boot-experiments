plugins {
	id 'org.springframework.boot' version '2.6.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'com.github.ben-manes.versions' version '0.39.0'
	id 'org.sonarqube'
	id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'
targetCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	// Spring GraphQl is not released yet, add spring snapshot repo
	maven { url 'https://repo.spring.io/milestone' }
}

ext {
	set('testcontainersVersion', "1.16.2")
}

dependencies {
	implementation 'org.springframework.experimental:graphql-spring-boot-starter:1.0.0-M3'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.liquibase:liquibase-core'
	// Printing Queries effectively
	implementation 'net.ttddyy:datasource-proxy:1.7'

	// QueryDSL for JPA
	implementation 'com.querydsl:querydsl-core'
	implementation 'com.querydsl:querydsl-jpa'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok',
            'com.querydsl:querydsl-apt:5.0.0:jpa',
            'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2',
            'javax.annotation:javax.annotation-api'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'org.springframework.graphql:spring-graphql-test:1.0.0-M3'
	testImplementation 'org.projectlombok:lombok'
}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

defaultTasks "bootRun"

springBoot {
	buildInfo()
}

compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo

test {
	useJUnitPlatform()
}

file("sonar-project.properties").withReader {
	Properties sonarProperties = new Properties()
	sonarProperties.load(it)

	sonarProperties.forEach { key, value ->
		sonarqube {
			properties {
				property key, value
			}
		}
	}
}
