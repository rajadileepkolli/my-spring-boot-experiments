buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
    }
    dependencies {
        classpath "com.avast.gradle:gradle-docker-compose-plugin:${docker_compose_plugin_version}"
        classpath "org.owasp:dependency-check-gradle:${owasp_plugin_version}"
    }
}

plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'java-library'
    id 'com.gorylenko.gradle-git-properties'
    id 'com.github.ben-manes.versions'
    id 'com.github.sherter.google-java-format'
    id "org.sonarqube" apply false
    id 'java'
}

apply plugin: "idea"
apply from: "gradle/code-quality.gradle"
if (project.hasProperty("ci")) {
    apply from: "gradle/owasp.gradle"
}

group = 'com.example.graphql'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 18
targetCompatibility = 18

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

ext {
    set('testcontainers_version', "1.17.3")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-graphql'

    // To fix com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Java 8 date/time type `java.time.Instant`
    // not supported by default
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    // Needed to run liquibase
    implementation 'org.springframework:spring-jdbc'
    // Needed for pointcut
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    runtimeOnly 'org.postgresql:r2dbc-postgresql'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.springdoc:springdoc-openapi-webflux-ui:1.6.10'
    implementation "org.zalando:problem-spring-webflux:0.27.0"
    implementation "org.apache.commons:commons-lang3:${commons_lang_version}"
    implementation "commons-io:commons-io:${commons_io_version}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation "org.projectlombok:lombok"
    testImplementation "org.awaitility:awaitility"
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:r2dbc'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainers_version}"
    }
}

defaultTasks "bootRun"

springBoot {
    buildInfo()
}

bootJar {
    //launchScript()
}

bootBuildImage {
    imageName = "DOCKER_USERNAME/spring-graph-ql"
}

compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo

if (project.hasProperty("local")) {
    bootRun {
        args = ["--spring.profiles.active=local"]
    }
}

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

googleJavaFormat {
    toolVersion = '1.15.0'
    options style: 'AOSP'
}

check.dependsOn verifyGoogleJavaFormat

test {
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntegrationTest*", "**/*IntTest*"
    testLogging {
        events = ["PASSED", "FAILED", "SKIPPED"]
        showStandardStreams = true
        exceptionFormat = "full"
    }
}

task integrationTest(type: Test) {
    useJUnitPlatform()

    include "**/*IT*", "**/*IntegrationTest*", "**/*IntTest*"
    shouldRunAfter test

    testLogging {
        events = ["PASSED", "FAILED", "SKIPPED"]
        showStandardStreams = true
        exceptionFormat = "full"
    }
}

check.dependsOn integrationTest

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

task integrationTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn integrationTest
}
